from .NoSQL import NoSQL

class MongoDB (NoSQL):
    def __init__(self, db_name: str, user: str, password: str, tables: dict[str, str], create: bool = True, replica_count: int = 3, tls_enabled: bool = False):
        super().__init__('mongodb', db_name, tables, create)

        self.user = user
        self.password = password
        self.replica_count = replica_count
        self.tls_enabled = tls_enabled

    def write(self):
        super().write()

        with open('templates/mongo-service-account-database.yaml', 'w') as f:
            f.write('{{- if and (eq .Values.nosql.type "mongodb") (.Values.nosql.create) -}}' + '\n')
            f.write('apiVersion: v1' + '\n')
            f.write('kind: ServiceAccount' + '\n')
            f.write('metadata:' + '\n')
            f.write('  ' + 'name: mongodb-database' + '\n')
            f.write('  ' + 'namespace: {{ .Release.Namespace }}' + '\n')
            f.write('{{- end -}}')
        
        with open('templates/mongo-role-database.yaml', 'w') as f:
            f.write('{{- if and (eq .Values.nosql.type "mongodb") (.Values.nosql.create) -}}' + '\n')
            f.write('apiVersion: rbac.authorization.k8s.io/v1' + '\n')
            f.write('kind: Role' + '\n')
            f.write('metadata:' + '\n')
            f.write('  ' + 'name: mongodb-database' + '\n')
            f.write('  ' + 'namespace: {{ .Release.Namespace }}' + '\n')
            f.write('rules:' + '\n')
            f.write('  ' + '- apiGroups:' + '\n')
            f.write('  ' + '  ' + '- ""' + '\n')
            f.write('  ' + '  ' + 'resources:' + '\n')
            f.write('  ' + '  ' + '- secrets' + '\n')
            f.write('  ' + '  ' + 'verbs:' + '\n')
            f.write('  ' + '  ' + '- get' + '\n')
            f.write('  ' + '- apiGroups:' + '\n')
            f.write('  ' + '  ' + '- ""' + '\n')
            f.write('  ' + '  ' + 'resources:' + '\n')
            f.write('  ' + '  ' + '- pods' + '\n')
            f.write('  ' + '  ' + 'verbs:' + '\n')
            f.write('  ' + '  ' + '- patch' + '\n')
            f.write('  ' + '  ' + '- delete' + '\n')
            f.write('  ' + '  ' + '- get' + '\n')
            f.write('{{- end -}}')
        
        with open('templates/mongo-role-binding-database.yaml', 'w') as f:
            f.write('{{- if and (eq .Values.nosql.type "mongodb") (.Values.nosql.create) -}}' + '\n')
            f.write('apiVersion: rbac.authorization.k8s.io/v1' + '\n')
            f.write('kind: RoleBinding' + '\n')
            f.write('metadata:' + '\n')
            f.write('  ' + 'name: mongodb-database' + '\n')
            f.write('  ' + 'namespace: {{ .Release.Namespace }}' + '\n')
            f.write('subjects:' + '\n')
            f.write('- kind: ServiceAccount' + '\n')
            f.write('  ' + 'name: mongodb-database' + '\n')
            f.write('  ' + 'namespace: {{ .Release.Namespace }}' + '\n')
            f.write('roleRef:' + '\n')
            f.write('  ' + 'kind: Role' + '\n')
            f.write('  ' + 'name: mongodb-database' + '\n')
            f.write('  ' + 'namespace: {{ .Release.Namespace }}' + '\n')
            f.write('  ' + 'apiGroup: rbac.authorization.k8s.io' + '\n')
            f.write('{{- end -}}')

        with open('templates/mongo-credentials-secret.yaml', 'w') as f:
            f.write('{{- if eq .Values.nosql.type "mongodb" -}}' + '\n')
            f.write('apiVersion: v1' + '\n')
            f.write('kind: Secret' + '\n')
            f.write('metadata:' + '\n')
            f.write('  ' + 'name: {{ .Release.Name }}-mongo-credentials' + '\n')
            f.write('type: Opaque' + '\n')
            f.write('data:' + '\n')
            f.write('  ' + 'user: {{ .Values.nosql.user | b64enc }}' + '\n')
            f.write('  ' + 'password: {{ .Values.nosql.password | b64enc }}' + '\n')
            f.write('  ' + '{{- if and (.Values.nosql.connectionString) (not .values.nosql.create) }}' + '\n')
            f.write('  ' + 'connection-string: {{ .Values.nosql.connectionString | b64enc }}' + '\n')
            f.write('  ' + '{{- else if .Values.nosql.create }}' + '\n')
            f.write('  ' + 'connection-string: {{ printf "mongodb://%s:%s@%s-mongo-svc.%s.svc.cluster.local:27017/%s?replicaSet=%s-mongo" .Values.nosql.user .Values.nosql.password .Release.Name .Release.Namespace .Values.nosql.name .Release.Name | b64enc }}' + '\n')
            f.write('  ' + '{{- end }}' + '\n')
            f.write('{{- end -}}')
        
        with open('templates/mongo.yaml', 'w') as f:
            f.write('{{- if and (eq .Values.nosql.type "mongodb") (.Values.nosql.create) -}}' + '\n')
            f.write('apiVersion: mongodbcommunity.mongodb.com/v1' + '\n')
            f.write('kind: MongoDBCommunity' + '\n')
            f.write('metadata:' + '\n')
            f.write('  ' + 'name: {{ .Release.Name }}-mongo' + '\n')
            f.write('  ' + 'namespace: {{ .Release.Namespace }}' + '\n')
            f.write('spec:' + '\n')
            f.write('  ' + 'members: {{ .Values.nosql.replicaCount }}' + '\n')
            f.write('  ' + 'type: ReplicaSet' + '\n')
            f.write('  ' + 'version: 4.4.0' + '\n')
            f.write('  ' + 'security:' + '\n')
            f.write('  ' + '  ' + 'authentication:' + '\n')
            f.write('  ' + '  ' + '  ' + 'ignoreUnknownUsers: true' + '\n')
            f.write('  ' + '  ' + '  ' + 'modes:' + '\n')
            f.write('  ' + '  ' + '  ' + '- SCRAM' + '\n')
            f.write('  ' + '  ' + 'tls:' + '\n')
            f.write('  ' + '  ' + '  ' + 'enabled: {{ .Values.nosql.tls.enabled }}' + '\n')
            f.write('  ' + 'readinessProbe:' + '\n')
            f.write('  ' + '  ' + 'initialDelaySeconds: 30' + '\n')
            f.write('  ' + '  ' + 'periodSeconds: 10' + '\n')
            f.write('  ' + 'users:' + '\n')
            f.write('  ' + '  ' + '- name: {{ .Values.nosql.user }}' + '\n')
            f.write('  ' + '  ' + '  ' + 'db: {{ .Values.nosql.name }}' + '\n')
            f.write('  ' + '  ' + '  ' + 'passwordSecretRef:' + '\n')
            f.write('  ' + '  ' + '  ' + '  ' + 'name: {{ .Release.Name }}-mongo-credentials' + '\n')
            f.write('  ' + '  ' + '  ' + '  ' + 'key: password' + '\n')
            f.write('  ' + '  ' + '  ' + 'roles:' + '\n')
            f.write('  ' + '  ' + '  ' + '  ' + '- name: readWrite' + '\n')
            f.write('  ' + '  ' + '  ' + '  ' + '  ' + 'db: {{ .Values.nosql.name }}' + '\n')
            f.write('  ' + '  ' + '  ' + 'scramCredentialsSecretName: {{ .Release.Name }}-mongo-scram' + '\n')
            f.write('{{- end -}}')